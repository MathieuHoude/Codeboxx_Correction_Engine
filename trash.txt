
// func dockerComposeUp() {
// 	cmd := exec.Command("docker-compose", "-f", "./rubyResidentialControllerGrading/docker-compose.yml", "--project-directory", "./rubyResidentialControllerGrading", "up", "-d")
// 	stdout, err := cmd.Output()

// 	if err != nil {
// 		fmt.Println(err.Error())
// 		return
// 	}
// 	fmt.Println(string(stdout))
// }

// func dockerComposeDown() {
// 	cmd := exec.Command("docker-compose", "-f", "./rubyResidentialControllerGrading/docker-compose.yml", "--project-directory", "./rubyResidentialControllerGrading", "down")
// 	stdout, err := cmd.Output()

// 	if err != nil {
// 		fmt.Println(err.Error())
// 		return
// 	}
// 	fmt.Println(string(stdout))
// }
func httpRequest(method string, url string, httpBody io.Reader) ([]byte, error) {
	client := &http.Client{}
	req, err := http.NewRequest(method, url, httpBody)

	// NOTE this !!
	req.Close = true

	req.Header.Set("Content-Type", "application/json")
	req.SetBasicAuth("user", "pass")
	resp, err := client.Do(req)
	if err != nil {
		// whatever
	}
	defer resp.Body.Close()

	response, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		// Whatever
	}
	return response, err
}